//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PauseInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PauseInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PauseInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PauseInput"",
    ""maps"": [
        {
            ""name"": ""Pausemap"",
            ""id"": ""8a3cac9a-878b-4dd7-ade0-8ba7f7323c36"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""02820038-96cb-4245-8c52-37751ab3a8d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56e0e742-c981-4d55-9843-b38637e9d12f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UI Scheme"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceb3a3fa-ffa5-4e6b-bebe-743be4ce4377"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UI Scheme"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82fe08a0-1dda-4de2-918b-007e3483f947"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UI Scheme"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""UI Scheme"",
            ""bindingGroup"": ""UI Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Pausemap
        m_Pausemap = asset.FindActionMap("Pausemap", throwIfNotFound: true);
        m_Pausemap_Start = m_Pausemap.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pausemap
    private readonly InputActionMap m_Pausemap;
    private IPausemapActions m_PausemapActionsCallbackInterface;
    private readonly InputAction m_Pausemap_Start;
    public struct PausemapActions
    {
        private @PauseInput m_Wrapper;
        public PausemapActions(@PauseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Pausemap_Start;
        public InputActionMap Get() { return m_Wrapper.m_Pausemap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PausemapActions set) { return set.Get(); }
        public void SetCallbacks(IPausemapActions instance)
        {
            if (m_Wrapper.m_PausemapActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_PausemapActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_PausemapActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_PausemapActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_PausemapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public PausemapActions @Pausemap => new PausemapActions(this);
    private int m_UISchemeSchemeIndex = -1;
    public InputControlScheme UISchemeScheme
    {
        get
        {
            if (m_UISchemeSchemeIndex == -1) m_UISchemeSchemeIndex = asset.FindControlSchemeIndex("UI Scheme");
            return asset.controlSchemes[m_UISchemeSchemeIndex];
        }
    }
    public interface IPausemapActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
}
